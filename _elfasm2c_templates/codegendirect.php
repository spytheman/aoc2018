<?php
$programsize = count($program); 
$rip = "r{$ipidx}";
printf("//// HIGHLY EXPERIMENTAL!!! Code generated by --codegendirect \n");
printf("//// TODO \n");
printf("\n");
printf("///  IP === {$rip} \n");
printf("///  ^^^^^^^^^\n");
$regs = []; $regnames = []; $regpercents = [];
foreach($cpustate as $k=>$v) {
    $regnames[] = "r{$k}";
    $regpercents[] = "%9d";
    $regs[] = sprintf("r{$k}={$v}"); 
}
printf("int %s;\n", join(',',$regs));
printf("char _regsbuffer[255];\n");
printf("char * Elf_regs2string(){");
echo  ('  sprintf(_regsbuffer, "R:['.join(',',$regpercents).']", '.join(',',$regnames).");");
printf("  return _regsbuffer; ");
printf("}\n");
echo("#define badJump(line, reg) { fprintf(stderr, \"Long jump made at line %d . Offset value was: %d.\\n\", (line), (reg)); abort(); } \n");
printf("bool Elf_emulate(long maxCount, long *actualIterationCount)\n");
printf("{\n");
$programEndWithPadding=$programsize+5;
$glabels = []; for($i=0;$i<$programEndWithPadding;$i++){ $glabels[] = "&&l{$i}"; }
printf("  static void *glabels[] = { %s };\n", join(', ', $glabels));
printf("  long c=0;\n");
printf("  int *ip = &{$rip}; \n");
printf("\n");
printf("  goto *glabels[ {$rip} ]; \n"); // allows the continuation of previous batch runs
printf("\n");
for($i=0;$i<$programsize;$i++){
    $label = "l{$i}:";
    $ins = $program[$i];
    $cop = ";";
    $smetainstruction = "{$rip}++; if( ++c >= maxCount ) goto lBatchFinished;";
    switch($ins[0]){
     case "addr": $cop = " r{$ins[3]} = r{$ins[1]} + r{$ins[2]}; "; break;
     case "addi": $cop = " r{$ins[3]} = r{$ins[1]} + {$ins[2]}; "; break;
     case "mulr": $cop = " r{$ins[3]} = r{$ins[1]} * r{$ins[2]}; "; break;
     case "muli": $cop = " r{$ins[3]} = r{$ins[1]} * {$ins[2]}; "; break;
     case "banr": $cop = " r{$ins[3]} = r{$ins[1]} & r{$ins[2]}; "; break;
     case "bani": $cop = " r{$ins[3]} = r{$ins[1]} & {$ins[2]}; "; break;
     case "borr": $cop = " r{$ins[3]} = r{$ins[1]} | r{$ins[2]}; "; break;
     case "bori": $cop = " r{$ins[3]} = r{$ins[1]} | {$ins[2]}; "; break;
     case "setr": $cop = " r{$ins[3]} = r{$ins[1]}; "; break;
     case "seti": $cop = " r{$ins[3]} = {$ins[1]}; "; break;
     case "gtir": $cop = " r{$ins[3]} = ({$ins[1]} > r{$ins[2]})?1:0; "; break;
     case "gtri": $cop = " r{$ins[3]} = (r{$ins[1]} > {$ins[2]})?1:0; "; break;
     case "gtrr": $cop = " r{$ins[3]} = (r{$ins[1]} > r{$ins[2]})?1:0; "; break;
     case "eqir": $cop = " r{$ins[3]} = ({$ins[1]} == r{$ins[2]})?1:0; "; break;
     case "eqri": $cop = " r{$ins[3]} = (r{$ins[1]} == {$ins[2]})?1:0; "; break;
     case "eqrr": $cop = " r{$ins[3]} = (r{$ins[1]} == r{$ins[2]})?1:0; "; break;
    }
    if($ins[3] === $ipidx){
        $smetainstruction .= " if( {$rip} <= {$programsize} ) goto *glabels[ {$rip} ]; else badJump({$i}, {$rip}); "; // not optimized, but works in every case :-)
        switch('x'.$ins[0]){
         case 'seti':{
             $lgoto = "l".($ins[1]+1); // +1 since the IP would be incremented *after each* instruction
             $cop = " goto {$lgoto};";
             $smetainstruction = '';
             break;
         }
         case 'addr':{
             if($ins[2]===$ipidx){
                 $conditionR  = "r{$ins[1]}";
                 $lnext = "l".($i+1);
                 $lskip = "l".($i+2);
                 $cop = " switch( $conditionR ) { case 0: goto {$lnext}; case 1: goto {$lskip}; default: badJump({$i}, $conditionR); }; ";
                 $smetainstruction = '';
             }
             break;
         }
         case 'addi':{
             if($ins[2]===$ipidx){
                 $lgoto = "l".($i+$ins[1]+1);
                 $cop = " goto {$lgoto};";
                 $smetainstruction = '';
             }
             break;
         }
        }
    }
    printf("   %6s  %-25s %s // %s\n", $label, $cop, $smetainstruction, ve($ins));
}
printf("\n");
for($x=$i;$x<$programEndWithPadding;$x++){   printf("     l{$x}: ; // program end padding \n"); }
echo  ('          printf("        Terminating ... Elf_emulate C: %12ld | IP: %3d \n", c, *ip ); '."\n");
printf("          *actualIterationCount += c;\n");
printf("          return false;\n");

printf("\n");
printf("     lBatchFinished: \n");
printf("       *actualIterationCount += c;\n");
printf("       return true;\n");
printf("}\n");
